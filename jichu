
字节码：.pyc 文件    bytecode

交互式解释器
python程序文件.py

可以分解为模块、语句、表达式和对象
	程序有模块构成
	模块包含语句
	语句包含表达式
	表达式建立并处理对象
数据结构
	通过某种方式（例如对元素进行编号）组织在一起的数据元素的集合，这些数据元素可以是数据或者字符，甚至可以是其他的数据元素

关键要素
	基本数据类型
	对象引用
	组合数据类型
	逻辑操作符
	控制流语句
	算术操作符
	输入/输出
	函数创建和引用

使用type()获取函数的类型
使用id()获取内存的位置
使用dir()获取模块的子命令
使用len()获取元素内部的个数
使用help()获取函数详细信息 
dir（__builtin__）可以查看内建的函数
callable()可用于测试函数是否可以调用

命名惯例：
 以单一下划线开头的变量名（_x） 不会被（from module import *）这个语句导入
 前后有双下划线的变量名（__x__）是系统定义的变量名，对python解释器有特殊意义
 以两个下划线开头但结尾没有下划线的变量名(__x)是类的本地变量
 交互式模式下，变量名“_” 用于保存最后表达式的结果

每个模块都有一个名为__name__的内建变量，此变量值会根据调用时
	如果模块被导入，__name__的值是模块的名字
	如果模块被直接执行，__name__的值是“__main__”

两个对象的比较：
	1.值比较：对象中的数据是否相同 num1 == num2
	2.身份比较：两个变量名引用的是否为同一对象 num1 is num2
	3.类型比较：两个对象的类型是否相同 type(num1) is type(num2)

数据类型转换：
	显示
	隐式

字典：kv集合
	{“a”:31，“b”:545}


核心数据类型	
	数字：int，long，flocat，complex，bool
	字符：str，unicode
	列表：list
	字典：dict
	元组：tuple
	文件：file
	其他类型：集合（set），frozenset，类类型，空（None）

其他文件类工具：管道（pipes），先进先出管道（fifos），sockets


类型转换：
	str（），repr（）和formatat（）：将非字符型数据转换为字符
		str：做对象序列化的结果，强制转换,str后的输出和print一样 5
		repr：做精确转换，不转换元对象，转换后的输出的是精确值  '5'
		format：
	int（）：转换成整数
	float（）：转换成浮点型

	list（s）：将字串s转换成列表
	tuple（s）：将字串s转换成元组
	set(s)：将字串s转换为集合
	frozenset（s）：将字串s转换为不可变集合
	dict（d）：根据指定的键值对创建字典，其中d必须是（key，value）的元组序列

	chr（x）：将整数转换为字符
	ord（x）:将字符转换为整数值
	hex(x)：将整数转换成16进制字符
	bin（x）：将整数转换成2进制字符
	oct（x）：将整数转换成8进制字符


数字类型：
	python的数字字面量：布尔型，整数，浮点型，负数
		True：1
		False：0
	为不可变类型

	math模块可以实现算术的高级运算


序列类型：
	字符类型
		字符串字面量：把文本放入单引号、双引号或三引号中：前后要一致
	如果要使用unicode编码，则在字符之前使用字符u进行标识，如u“mageedu”

	文档字符串：模块、类或函数的第一条语句是一个字符的话，该字符串就成为文档字符串，可以使用__doc__来引用

	运算符：
		索引运算符：[i]可以使用负数，即倒着取值
		切片运算符：[i:j]
		扩展切片:[i:j:stride]

	支持运算
		索引，切片，min(),max(),len()等
	支持操作
		对象自有的操作


列表：
	容器类型
		任意对象的有序集合，通过索引访问其中的元素，可变对象
		异构，任意嵌套

	支持在原处修改：
		修改指定的索引元素，修改指定的分片，删除语句，内置方法
	l1 + l2:合并两个列表，返回一个新的列表，不会修改原列表
	l1 * n:把l1重复N次，返回一个新列表

	in：成员关系判断字符，用法 obj in container
	not in： obj not in container


	列表解析：[]


	列表复制方法：
		l1=[1,2,3,4]
		浅复制
		l2=l1
		深度复制
		import copy
		l2=copy.deepcopy(l1)

		l2=l1[:]

	元组：
		表达式符号：()

		容器类型
			任意对象的有序集合，通过索引访问其中的元素，不可变对象，长度固定
			支持异构，嵌套

		常见操作：
			()
			(1,)
			(1,2)

			t1 + t2
			t1 * n

			in:
			not in:


		虽然元组本身不可变，但如果元组内嵌套了可变类型的元素，那么此类元素的修改不会返回元组

	字典：dict
		字典在其他编程语言中又称为关联数组或散列表

		通过键实现元素存取，无序集合，可变类型容器，长度可变，异构，嵌套

		{key1:value1,key2:value2,....}

		{}:空字典

		字典复制：d2=d1.copy()

		d1.iteritems:返回一个迭代器对象
语句和语法

注释
  #可以从一行的任何地方开始
  '''   ''' 多行注释
  """   """ 多行注释
续行
  \
  '''
  """
代码组
  缩进相同的一组语句构成一个代码块
  首行以关键字开始，如if,while等，以冒号结束
  python使用缩进来分割代码组，同一代码组的代码行必须严格左对齐，否则会造成语法错误
同一行放置多个语句
 ;:做分隔符
模块
  每一个python脚本文件都可以被当做模块
  模块的代码可以是一段直接执行的脚本，也可以是一些类似库函数的代码，利用导入使用
标识符

注释 既不能缺少，也不能过分注释
文档 python允许通过__doc__动态获得文档字串

文件结构
#!/usr/bin/env python   起始行

"this is a ..."         模块文档

import sys              模块导入
import os

debug = ture            (全局)变量定义

class Fooclass(object): 类定义（若有）
    "Foo class"
    pass

def test():                函数定义
    "test functiuon"
    foo = Fooclass()
    if debug:
        print 'ran test()'

if __name__ == '__main__':      主程序
    test()

注意：所有的模块都有能力执行代码
  最高级别的python语句（没有缩进的）在模块被导入时就会执行，无论是否真的需要执行
  妥当的做法 除了那些需要真正执行的代码以外，所有功能代码都通过函数建立，因此
    仅在主程序模块中编写大量的顶级可执行代码
    用于被导入的模块只应该存在较少的顶级执行代码
__name__ 指示模块应该如何被加载
  如果模块被导入的，__name__ 的值是模块名字
  如果模块是直接执行，__name__的值是’__main__‘
