条件测试

python中所有对象都支持比较操作
 可用于测试相等性，相对大小等
 如果是复合对象，python会检查其所有部分，包括自动遍历各级嵌套对象，知道可以得出最终结果

==，<,> ...
is
in

python中不同类型的比较
 数字：通过相对大小进行比较
 字符串：按照字典次序逐字符进行比较
 列表和元组：自左至右比较各部分内容
 字典：对排序之后的（键，值）列表进行比较
python中真假
  1、任何非0数字和非空对象都为真
  2、数字0、空对象和None均为假
  3、比较和相等测试会递归的应用于数据结构中
  4、返回值为Ture或False
组合条件测试
  x and y  与运算
  x or y   或运算
  not x    非运算

if
if boolean_expression1:
   suite1
elif expression2:
   suit2
else:
   else_suite

elif语句是可选的，
仅用于占位，而后在填充相关语句时，可以使用pass

x if y else z
expression1 if boolean_expression else expression2

while
  用于编写通用迭代结构
  顶端测试为真即会执行循环体，并会重复多次测试直到为假后执行循环后的其他语句
for循环
  一个通用的序列迭代器，用于遍历任何有序的序列对象内的元素
  可用于字符串，元组，列表，和其他的位置可迭代对象，以及通过类所创建的新对象
python 也提供了一些能够进行隐形迭代的工具
  in 成员关系测试
  列表解析
  map、reduce和filter函数

while
  while boolean_expression:
    while_suite
  else:
    else_suite

else分之为可选部分
只要boolean_expression结果为true,循环就会执行，boolean_expression的结果为False时会终止循环，此时如果有else语句，则会执行一次else语句

break 跳出最内层的循环
continue 跳到所处的最近层的循环的开始处
pass 占位语句
else代码块  循环正常终止才会执行，如果是循环终止是由break跳出导致的，则else不会执行
while true: 死循环

for
  for expression1 in iterable:
    for_suite
  else:
    else_suite
通常expression1或是一个单独的变量，或是一个变量序列，一般以元祖的形式给出
如果以元组或列表用于expression,则其中的每个数据项都会拆分到表达式的项，列入
  T = [(1,2),(3,4),(5,6),(7,8)]
  for (a,b) in T:
    print a,b

for循环比while循环执行速度快
python 提供了两个内置函数，用于在for循环中定制特殊的循环
range或xrange
  range 一次性的返回连续的整数列表，存放于内存中
  xrange 一次产生一个数据元素，相较于range更节省内存空间
  zip 返回并行的元素元组的列表，常用于在for循环中遍历整个序列
列子
非完备遍历，用于每隔一定的个数元素挑选一个元素
S = 'How are you thest days?'
range(0,len(S),2)
for i in range(0,len(S),2): print S[i],

修改列表
L = [1,2,3,4,5,6]
for i in range(len(L)): L[i] += 1

并行遍历
zip 取得一个或多个序列为参数，将给定序列中的并排的元素配成元组，返回这些元组的列表
 当参数长度不一致时吗，zip会以最短序列长度为准
可在for循环中用于实现并行迭代
列子
L1 = [1,2,3,4,5,6,7]
L2 = ['a','b','c','d','e','f','g']
zip(L1,L2)

zip也常用于动态构造字典
keys = [1,2,3,4,5,6,7]
values = ['Mon','Tus','Wed','Thu','Fri','Sat','Sun']
D={}
for (k,v) in zip(keys,values): D[k] = v

异常处理
try-except

try:
    <.....>        # 可能出现异常的语句
except <....>:     #锁定是哪种异常
    <........>      #出现异常的处理方法

例子：
import sys
try:
    s = raw_input('Enter something:')   #可能遇到异常的语句
except EOFError:                        #锁定哪种异常
    print 'ERROR INPUT'                 #出现异常的处理方法
    sys.exit()
print s

