函数是python为了代码最大程度的重用和最小化代码冗余而提供的基本程序结构
函数是一种设计工具，它能让程序员将复杂的系统分解为可管理的部件
函数将相关功能打包并参数化
python中可以创建4种函数：
  全局函数：定义在模块中
  局部函数：嵌套于其他函数中
  lambda函数（匿名函数）：表达式
  方法：与特定数据类型关联的函数，并且只能与数据类型关联一起使用
python提供了很多内置函数


def functiom[()|(arguements)]:
    suite

def functiom[()|(arguements)]:
    suite
    returm value

def是一个可执行语句：
  因此可以出现在任何能够使用语句的地方，甚至可以嵌套于其他语句如if,while,但不能再如[],{},()中
每个python函数都可以有一个返回值，默认为NONE,也可以使用“return value” 明确定义返回值，return会输出信息，返回多个值，彼此间使用逗号分隔，且返回对象为一个元组

callable(name) 用来测试是否可调用
def语句会创建一个函数对象，并同时创建一个指向函数的对象引用
  函数也是对象，可以存储在组合数据类型中，也可以作为参数传递给其他函数
  callable() 测试

def testFunc():
    pass

pass占位

函数：
  名称空间（作用域）
python创建，改变或查找变量名都是在名称空间中进行
 变量名解析法则
在代码中变量名被赋值的位置决定了其能被访问到的范围
函数定义了本地作用域，而模块定义了全局作用域
  每个模块都是一个全局作用域，因此，全局作用域的范围仅限于单个程序文件
  每次对函数的调用都会创建一个新的本地作用域，赋值的变量除非声明为全局变量（global x;x = 2）,否则均为本地变量
  所有的变量名都可以归纳为本地，全局或内置（由__builtin__模块提供）

变量名解析：LEGB原则
变量名引用分三个作用域进行，首先是本地，之后是函数内，接着是全局，最后是内置
built-in(python)
  global(module)
    endosing function locals
       local(function)

python中函数的闭包
def f1():
   ...:     x = 3
   ...:     def f2():
   ...:         y = 'hello'
   ...:         print x,y
   ...:     return f2

def f1(arg1,arg2,arg3,...)

参数传递是通过自动将对象赋值给本地变量实现的
  不可变参数通过"值"进行传递
    在函数内部改变形参的值，只是让其引用了另一个对象
  可变参数通过"指针"进行传递
    在函数内部改变形参的值，将直接修改引用对象

参数传递形式
  位置参数，从左向右
  关键字参数，按关键字名称匹配，次序不固定
     如果两者混用时，先写所有的位置参数，在写所有的关键词参数
   定义时可以使用默认参数：有默认值的参数，name='value',可以实现参数个数不匹配
     混用有默认和无默认值的参数时，无默认值的放前面
   可变参数：定义函数时使用*开头的参数，可用于收集任意多基于位置或关键字的参数
     def f10(*x):
        print x

      一个*表示将位置参数都收集并作为元组
      def f10(**x):
        print x

      两个*号表示将关键字参数都收集为字典
   可变参数只能写在右侧
      def f11(x,*y)
      def f12(*x,**y)

   可变参数解包：调用函数时，使用*开头的参数，可用于将参数集合打散，从而传递任意多基于位置或关键字的参数
       l1 = ['Sun'.'Mon','Tue']
       def f13(x,y,z):
          print x,y,z
      
        f13(*l1)

        def f14(*y):
           print y

        f14(*l1)

       调用可以用* 和** 用于打散参数，并重新收集

lambda 运算符,匿名函数
  lambda args: expression
    args:以逗号分隔的参数列表
    expression:用到args中各参数的表达式
  lambda语句定义的代码必须是合法的表达式，不能出现多条件语句（可使用if的三元表达式）和其他非表达式语句，如for和while等
  lambda的首要用途是指定短小的回调函数
  lambda将返回一个函数而不是将函数数值给某变量名

注意
  lambda是一个表达式而非语句
  lambda是一个单个表达式，而不是一个代码块
  
   f20 = lambda x,y: x + y
   f20(3,4)

  def语句创建的函数将赋值给某变量名，而lambda表达式则直接返回函数
  lambda也支持使用默认参数
    f2 = (lambda x,y,z=10: x+y+z)
    f2(4,5)
  
    l3 = [(lambda x: x*2),(lambda y: y*3)]
    for i in l3:
      print i(4)

对一种数据做多种处理时，可以使用以上lambda方式

函数式编程
  也叫泛函编程，是一种编程泛型
  将电脑运算视为数学上的函数计算，并且避免状态及可变数据
  函数式编程语言最重要的基础是lambda演算，而且lambda演算的函数可以接受函数当做输入和输出
python支持有限的函数式编程功能
filter()    python的内置函数，过滤器
      filter() 为已知的序列的每个元素调用给定的布尔函数
      调用中，返回值为非零值的元素将被添加至一个列表中
  filter(func,seq)  用func判断seq列表序列中的每个元素，
     def f1(x):
       if x > 20:
         return True
       else:
         return False
    
    l1 = [1,2,3,67,89,47]
    filter(f1,l1)

map(func,seq1[,seq2...]) 映射器，map() 将函数调用"映射"到每个序列的对应元素上并返回一个含有所有返回值的列表
带有单个队列的map()
带有多个队列的map()
 将func作用于给定序列（s）的每一个元素，并用一个列表来提供返回值，如果func为None,func表现为一个身份函数，返回一个含有每个序列中元素集合的n个元组的列表

    l1 = [0,1,2,3,4,5,6]
    l2 = ['S','M','w','T','R','O','P']
    map(None,l1,l2)

    def f3(x,y):
      return x*2,y*2
    map(f3,l1,l2)
快速将两个列表构建成一个元组列表

reduce(func,seq[,init]) 
  将二元函数作用于seq序列的元素，每次携带一对（先前的结果以及下一个序列元素），连续的将现有的结果和下一个值作用在获得的随后的结果上，最后减少我们的序列为一个单一的返回值没如果初始init给定，第一个比较会是init和第一个序列元素而不是序列的头两个元素）
折叠
def f5(x,y):
    return x+y

l1 = [1,2,3,4,5]
reduce(f5,l1)
reduce(f5,l1,10)

python 闭包，闭合函数
外层函数为内层函数提供运行环境
def f1(x):
    def f2(y):
        return y**x
    return f2

场景 棋盘，棋子，记录当前位置为起点，在移动位置

函数中使用yield 会返回一个生成器对象，
def genNum(n):
    i = 1
    while i <= n:
        yield i ** 2
        i += 1

g1 = genNum(20)
for i in g1:
    print i

装饰器：
  1、装饰器本身是一个函数，用于装饰其他函数
  2、功能：增强被装饰函数的功能

装饰器一般接受一个函数对象作为函数，以对其进行增强

def deco(func):
    def wrapper():
        print 'Plz say something: '
        func()
        print 'No zuo no die'
    return wrapper

@deco   #这是一个语句，后续需要定义其他函数，后面的函数将被当做参数传递给func
def show():
    print 'I am from Mars. '

show()       #调用

递归：
运行过程中一层一层调用自身
递归需要边界条件，递归前进段和递归返回段
