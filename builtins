内置类型
对象的相关术语
  instance 实例
程序中存储的所有数据都是对象
每个对象都有一个身份，一个类型，一个值
对象的类型用于描述对象内部表示及它支持的方法和操作
创建特定的对象时，也将该对象成为该类型的实例
实例被创建后，其身份和类型就不可改变
  如对象值是可修改的，称为可变对象（列表，字典）
  如对象的值是不可修改的，称为不可变对象（字串，元组）
如果某个对象包含对其他对象的引用，则将其称为容器
大多数对象都拥有大量的特有的数据属性和方法
  属性 与对象相关的值 print str.dd
  方法 被调用时将在对象上执行某些操作的函数 str.cc()
  .     使用.运算符可以访问属性和方法

类：数据和方法
  数据：变量
  方法：函数

str(),repr()或format() 将非字符型数据转换为字符
int() 转为整数
float（）


list(s) 将字串s转为列表
tuple(s) 将字串s转为元组
set(s) 将字串s转为集合
frozenset(s) 字串s转化为不可变集合
dict(d) 转换，创建字典，其中d必须是（key,value）的元组序列 [('a',4),('b',5),('c',11)]

chr(x) 将整数转为字符
ord(x) 将字符转换为整数值
hex(x) 将整数转换成十六进制字串
bin(x)             二进制
oct(x)             八进制

数字类型：
	python的数字字面量：布尔型，整数，浮点型，复数
		True：1
		False：0
	为不可变类型
	math模块可以实现算术的高级运算
数字操作
x+y
 -
 *
 /
 //  截断除法
 **  乘方
 %   取模
 -x  一元减法 -->负数
 +x  一元加法 --> 正数
 比较操作
  x << y  左移 转换为二进制，补0 左移变大
  x >> y  右移                   右移变小
  x & y   按位与
  x | y   按位或
  x ^ y   按位异或
  ~x      按位求反


序列类型
  字符类型，字符串字面量：把文本放入单引号、双引号或三引号中：前后要一致,三引号可以跨行，如果要使用unicode编码，则在字符之前使用字符u进行标识，如u“mageedu”
	文档字符串：模块、类或函数的第一条语句是一个字符的话，该字符串就成为文档字符串，可以使用__doc__来引用
 def pringName():
     "test,doc,"
     print "hellow word"
调用文档 printName.__doc__
	运算符：
		索引运算符：s[i]可以使用负数，即倒着取值
                  正负索引之和应该等于字符串长度
		切片运算符：s[i:j]
		扩展切片:s[i:j:stride]
         字符切片会形成一个新的内存对象，因为字符时不可变对象

	支持运算
		索引，切片，min(),max(),len()等
               len(s)
               min(s)
               max(s)
               sum(s) sum只适用于数字序列
               sum(s[,initia]) 字符串s中各项的和
               all(s)           检查字符串所有项是否为Ture
               any(s)           检查s中任意项是否为Ture  
	支持操作
		对象自有的操作
                str.captitalize() 首字符变大写
                str.index(sub[,start[,end]]) 找到指定子字符串sub首次出现的位置，否则报错
                s.join(t) 使用s作为分隔符，链接序列t中的字符串,即s是连接后使用的分隔符
                s.lower()  转换为小写
                s.upper()        大写
                s.replace(old,new[,maxreplace])替换一个字字符串,默认所有的都替换，maxreplace指定替换的次数
                s.split([sep[,maxsplit]]) 使用sep作为分隔符对一个字符串进行划分，分隔符是指原本存在字符串中的符号，或者字符串，被作为分隔符的字符串，不会显示，maxsplit是划分的最大次数
                s.strip([chrs]) 删掉chrs开头和结尾的空白或字符


列表：
	容器类型，任意对象的有序集合，通过索引访问其中的元素，可变对象,支持异构，任意嵌套

       list(s) 将s转换为一个列表,如果s已经是一个列表，此方式是一个浅复制
       l.append(x) 将一个新元素x追加到l末尾
       l.extend(t) 将一个新列表t追加到l末尾
       l.count(x)  计算l中x的出现次数
       l.index(x,[,start[,stop]]) 当l[i] == x时返回的最小的i，可使用start,stop用于指定搜索的起始和结束索引
       l.insert(i,x) 在索引i处插入x
       l.pop([i]) 返回索引i对应的元素并从列表中移除它。如果省略i，则返回列表中最后一个，按索引删除
       l.remove(x) 搜索x并存列表中移除它，按值删除
       l.reverse() 倒序排列列表中元素
       l.sort() 排序
       l.sort(key[,reverse]) 对列表中l中的所有元素进行排序，key是一个键函数，reverse是一个标志，表明以倒序对序列进行排序，key和reverse应该始终以关键字参数的形式指定
       l[1:3] = [] 删除
       del()	del(l[1:3]) 删除
      支持在原处修改：修改指定的索引元素，修改指定的分片，删除语句，内置方法

	l1 + l2:合并两个列表，返回一个新的列表，不会修改原列表
	l1 * n:把l1重复N次，返回一个新列表

	in：成员关系判断字符，用法 obj in container
	not in： obj not in container

range(10) 生成一个列表

	列表解析：[]
[for ...] 利用表达式生成列表

	列表复制方法：
		l1=[1,2,3,4]
		浅复制
		l2=l1  l1,l2指向同一个内存对象，修改是同步的
		深度复制
		import copy
		l2=copy.deepcopy(l1)或

		l2=l1[:]复制l1的所有元素生成新列表

	元组：
	表达式符号:()，容器类型，任意对象的有序集合，通过索引访问其中的元素，不可变对象，长度固定，支持异构，嵌套
		常见操作：
		       t2 = ()
			t2 = (1,)
			t2 = (1,2)
                      支持分片，因为分片是定义新对象
                        t2 = [1:3]
			t1 + t2 元素值合并返回新元组
			t1 * n
			in:
			not in:
                    t1.count()
                    t1.index()
	虽然元组本身不可变，但如果元组内嵌套了可变类型的元素，那么此类元素的修改不会返回元组

总结：
字串，列表，元组都支持的通用操作
s + r 连接
s*n,n*s 制作s的n个副本，n为整数
v1,v2,...vn = s 变量解包（unpack）
s[i] 索引
s[i:j] 切片
s[i:j:stride] 扩展切片
x in s,x not in s 从属关系
for x in s 迭代
all(s)
any(s)
len(s)
min(s)
max(s)
sum(s[,initial]) 具有可选初始值的项的和

字典：dict 字典中索引速度非常快
     字典在其他编程语言中又称为关联数组或散列表，通过键实现元素存取，无序集合，可变类型容器，长度可变，异构，嵌套
           {key1:value1,key2:value2,....}
           {}:空字典
           字典复制：d2=d1.copy()

d.clear() 清除字典中的所有元素
d2 = d1.copy() 字典复制
d.fromkeys(S[,v])
d.get() 取得对应键的值和索引一样
d.has_key(x) 字典有没有x这个键
d.items() 字典中的键值统统转换成元组列表，[(k1,v1),(k2,v2)] 形式
  t1,t2 = d1.items 变量解包
d.iteritems()以键值对做迭代，返回一个迭代器对象
d.iterkeys() 
d.itervalues() 
d.keys() 返回键列表
d.values() 返回值列表
d.pop(x) 弹出键为x的元素
d.popitem() 随机弹出键值映射
d1.update(d2) 将一个字段合并到当前字典,如果有键重复，d2d对应键的值会覆盖d1
d.viewitems()
	   i1 = d1.iteritems:返回一个迭代器对象
           i1.next() 用来实现遍历
语句和语法

注释
  #可以从一行的任何地方开始
  '''   ''' 多行注释
  """   """ 多行注释
续行
  \
  '''
  """
代码组
  缩进相同的一组语句构成一个代码块
  首行以关键字开始，如if,while等，以冒号结束
  python使用缩进来分割代码组，同一代码组的代码行必须严格左对齐，否则会造成语法错误
同一行放置多个语句
 ;:做分隔符
模块
  每一个python脚本文件都可以被当做模块
  模块的代码可以是一段直接执行的脚本，也可以是一些类似库函数的代码，利用导入使用
标识符

注释 既不能缺少，也不能过分注释
文档 python允许通过__doc__动态获得文档字串

文件结构
#!/usr/bin/env python   起始行

"this is a ..."         模块文档

import sys              模块导入
import os

debug = ture            (全局)变量定义

class Fooclass(object): 类定义（若有）
    "Foo class"
    pass

def test():                函数定义
    "test functiuon"
    foo = Fooclass()
    if debug:
        print 'ran test()'

if __name__ == '__main__':      主程序
    test()

注意：所有的模块都有能力执行代码
  最高级别的python语句（没有缩进的）在模块被导入时就会执行，无论是否真的需要执行
  妥当的做法 除了那些需要真正执行的代码以外，所有功能代码都通过函数建立，因此
    仅在主程序模块中编写大量的顶级可执行代码
    用于被导入的模块只应该存在较少的顶级执行代码
__name__ 指示模块应该如何被加载
  如果模块被导入的，__name__ 的值是模块名字
  如果模块是直接执行，__name__的值是’__main__‘

